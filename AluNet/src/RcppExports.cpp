// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// createGraphFromList
Rcpp::List createGraphFromList(const Rcpp::List& graphList);
RcppExport SEXP _AluNet_createGraphFromList(SEXP graphListSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type graphList(graphListSEXP);
    rcpp_result_gen = Rcpp::wrap(createGraphFromList(graphList));
    return rcpp_result_gen;
END_RCPP
}
// runLeiden
Rcpp::List runLeiden(Rcpp::List graphList, int iterations, double gamma, double theta, int seed);
RcppExport SEXP _AluNet_runLeiden(SEXP graphListSEXP, SEXP iterationsSEXP, SEXP gammaSEXP, SEXP thetaSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type graphList(graphListSEXP);
    Rcpp::traits::input_parameter< int >::type iterations(iterationsSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(runLeiden(graphList, iterations, gamma, theta, seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_AluNet_createGraphFromList", (DL_FUNC) &_AluNet_createGraphFromList, 1},
    {"_AluNet_runLeiden", (DL_FUNC) &_AluNet_runLeiden, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_AluNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
