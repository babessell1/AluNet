g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
#plot.graph(result, "karate_leiden.png")
g <- make_graph("Zachary")
# By default CPM is used
r <- quantile(strength(g))[2] / (gorder(g) - 1)
# Set seed for sake of reproducibility
set.seed(1)
ldc <- cluster_leiden(
g,
resolution_parameter=gamma,
objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
print(ldc)
plot(ldc, g)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
#sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=c(communities)
)
#plot.graph(result, "karate_leiden.png")
View(g)
View(g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
plot(ldc, g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
plot(my_ldc, g)
g <- make_graph("Zachary")
# By default CPM is used
r <- quantile(strength(g))[2] / (gorder(g) - 1)
# Set seed for sake of reproducibility
set.seed(1)
ldc <- cluster_leiden(
g,
resolution_parameter=gamma,
objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
print(ldc)
plot(ldc, g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
g <- make_graph('Zachary')
plot(my_ldc, g)
View(ldc)
View(ldc)
View(ldc)
View(ldc)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
g <- make_graph('Zachary')
#plot(my_ldc, g)
plot.graph(result, "karate_leiden.png")
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
#sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
g <- make_graph('Zachary')
#plot(my_ldc, g)
plot.graph(result, "karate_leiden.png")
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
plot.graph(g_list, "karate_nodes.png")
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
#sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
View(plot.graph)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
plot.graph(g_list, "karate_nodes.png", small_nodes=F)
source("C:/Users/bbessell/Projects/GitHub/AluNet/test_leiden.Rmd")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
Rcpp.package.skeleton(
"AluNet",
code_files = c(
"r/plotLeiden.R",
"r/graphFromFitHIC.R"
),
cpp_files = c(
"rcpp/Leiden.cpp",
"rcpp/Leiden.h",
"rcpp/Partition.cpp",
"rcpp/Partition.h",
"rcpp/Community.cpp",
"rcpp/Community.h",
"rcpp/GraphUtils.cpp",
"rcpp/GraphUtils.h"
),
example_code = FALSE
)
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Rcpp.package.skeleton(
"AluNet",
code_files = c(
"r/plotLeiden.R",
"r/graphFromFitHIC.R"
),
cpp_files = c(
"rcpp/Leiden.cpp",
"rcpp/Leiden.h",
"rcpp/Partition.cpp",
"rcpp/Partition.h",
"rcpp/Community.cpp",
"rcpp/Community.h",
"rcpp/GraphUtils.cpp",
"rcpp/GraphUtils.h"
),
example_code = FALSE
)
library(Rcpp)
Rcpp.package.skeleton(
"AluNet",
code_files = c(
"r/plotLeiden.R",
"r/graphFromFitHIC.R"
),
cpp_files = c(
"rcpp/Leiden.cpp",
"rcpp/Leiden.h",
"rcpp/Partition.cpp",
"rcpp/Partition.h",
"rcpp/Community.cpp",
"rcpp/Community.h",
"rcpp/GraphUtils.cpp",
"rcpp/GraphUtils.h"
),
example_code = FALSE
)
setwd("C:/Users/bbessell/Projects/GitHub/AluNet/AluNet")
devtools::check()
devtools::build()
knitr::opts_chunk$set(echo = TRUE)
install_github("bbessell/AluNet")
install_github("babessell1/AluNet")
library(devtools)
install_github("babessell1/AluNet")
install_github("https://github.com/babessell1/AluNet/")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
install.packages("AluNet_1.0.tar.gz")
library(Rcpp)
library(igraph)
library(microbenchmark)
install.packages("AluNet_1.0.tar.gz")
library(AluNet)
library(Rcpp)
library(igraph)
library(microbenchmark)
install.packages("AluNet_1.0.tar.gz")
library("AluNet"")
library(Rcpp)
library(igraph)
library(microbenchmark)
install.packages("AluNet_1.0.tar.gz")
library("AluNet")
library(Rcpp)
library(igraph)
library(microbenchmark)
install.packages("AluNet_1.0.tar.gz")
library("AluNet_1.0")
library(Rcpp)
library(igraph)
library(microbenchmark)
install.packages("AluNet_1.0.tar.gz")
library("AluNet-package")
library(Rcpp)
library(igraph)
library(microbenchmark)
install.packages("AluNet_1.0.tar.gz", repos=NULL)
library(Rcpp)
library(igraph)
library(microbenchmark)
#install.packages("AluNet_1.0.tar.gz", repos=NULL)
library(AluNet)
setwd("C:/Users/bbessell/OneDrive - Michigan Medicine/Documents/Courses/BIOSTAT615/test_package")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
#gdf <- make_graph("noperfectmatching")
runIgraph <- function(gdf, iterations, gamma, theta) {
ldc <- cluster_leiden(
gdf,
resolution_parameter=gamma,
objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
return(ldc)
}
plotIgraph <- function(gdf, ldc) {
color_palette <- heat.colors(100)
# create colormap for the communities
get_community_colors <- function(num_communities) {
rainbow(num_communities)
}
# map communities to the colormap
num_communities <- length(unique(ldc$membership))
community_colors <- get_community_colors(num_communities)
colors <- community_colors[as.factor(ldc$membership)]
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,  # Color nodes based on community
#edge.color = color_palette[g_list$weight],  # Map edge color from cold to hot
vertex.label = V(gdf)$community,
edge.arrow.size = 0,  # Set arrow size to 0 to remove arrows
main = "iGraph's C-based clustering"
)
# Add a legend for community colors
legend("topright", legend=unique(ldc$membership),
col = community_colors, pch = 19,
title = "Communities", cex = 0.8)
}
toy = "noperfectmatching"
iterations <- 10
gamma <- .1  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
g <- as_edgelist(make_graph(toy))
g_list <- list(
to=g[,1],from=g[,2],
weight=rep(1, length(g[,1]))  # all 1
)
toy = "Zachary"
iterations <- 10
gamma <- .1  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
g <- as_edgelist(make_graph(toy))
g_list <- list(
to=g[,1],from=g[,2],
weight=rep(1, length(g[,1]))  # all 1
)
gdf <- make_graph(toy)
seed <- 1
result <- runLeiden(g_list, iterations, gamma, theta, seed)
plotLeiden(result)
#setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
install.packages("AluNet_1.0.tar.gz")
devtools::install_github("babessell1/AluNet")
#setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
#install.packages("AluNet_1.0.tar.gz")
devtools::install_github("babessell1/AluNet")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet/AluNet")
compileAttributes(verbose=TRUE)
devtools::load_all()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::build()
#setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
#install.packages("AluNet_1.0.tar.gz")
devtools::install_github("babessell1/AluNet")
#setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
#install.packages("AluNet_1.0.tar.gz")
Sys.setenv("TAR" = "internal")
devtools::install_github("babessell1/AluNet")
#setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
#install.packages("AluNet_1.0.tar.gz")
Sys.setenv("TAR" = "internal")
devtools::install_github("babessell1/AluNet/AluNet")
