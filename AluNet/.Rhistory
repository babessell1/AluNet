#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- .5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
#plot.graph(result, "karate_leiden.png")
g <- make_graph("Zachary")
# By default CPM is used
r <- quantile(strength(g))[2] / (gorder(g) - 1)
# Set seed for sake of reproducibility
set.seed(1)
ldc <- cluster_leiden(
g,
resolution_parameter=1,
objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
print(ldc)
plot(ldc, g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 1  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
#plot.graph(result, "karate_leiden.png")
g <- make_graph("Zachary")
# By default CPM is used
r <- quantile(strength(g))[2] / (gorder(g) - 1)
# Set seed for sake of reproducibility
set.seed(1)
ldc <- cluster_leiden(
g,
resolution_parameter=1,
objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
print(ldc)
plot(ldc, g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 0.5
gamma <- 1  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
#plot.graph(result, "karate_leiden.png")
g <- make_graph("Zachary")
# By default CPM is used
r <- quantile(strength(g))[2] / (gorder(g) - 1)
# Set seed for sake of reproducibility
set.seed(1)
ldc <- cluster_leiden(
g,
resolution_parameter=1,
objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
print(ldc)
plot(ldc, g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
#plot.graph(result, "karate_leiden.png")
g <- make_graph("Zachary")
# By default CPM is used
r <- quantile(strength(g))[2] / (gorder(g) - 1)
# Set seed for sake of reproducibility
set.seed(1)
ldc <- cluster_leiden(
g,
resolution_parameter=1,
objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
print(ldc)
plot(ldc, g)
g <- make_graph("Zachary")
# By default CPM is used
r <- quantile(strength(g))[2] / (gorder(g) - 1)
# Set seed for sake of reproducibility
set.seed(1)
ldc <- cluster_leiden(
g,
resolution_parameter=gamma,
objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
print(ldc)
plot(ldc, g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
#plot.graph(result, "karate_leiden.png")
g <- make_graph("Zachary")
# By default CPM is used
r <- quantile(strength(g))[2] / (gorder(g) - 1)
# Set seed for sake of reproducibility
set.seed(1)
ldc <- cluster_leiden(
g,
resolution_parameter=gamma,
objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
print(ldc)
plot(ldc, g)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
#sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=c(communities)
)
#plot.graph(result, "karate_leiden.png")
View(g)
View(g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
plot(ldc, g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
plot(my_ldc, g)
g <- make_graph("Zachary")
# By default CPM is used
r <- quantile(strength(g))[2] / (gorder(g) - 1)
# Set seed for sake of reproducibility
set.seed(1)
ldc <- cluster_leiden(
g,
resolution_parameter=gamma,
objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
print(ldc)
plot(ldc, g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
g <- make_graph('Zachary')
plot(my_ldc, g)
View(ldc)
View(ldc)
View(ldc)
View(ldc)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
g <- make_graph('Zachary')
#plot(my_ldc, g)
plot.graph(result, "karate_leiden.png")
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
#sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
g <- make_graph('Zachary')
#plot(my_ldc, g)
plot.graph(result, "karate_leiden.png")
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
plot.graph(g_list, "karate_nodes.png")
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
#sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
View(plot.graph)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
plot.graph(g_list, "karate_nodes.png", small_nodes=F)
source("C:/Users/bbessell/Projects/GitHub/AluNet/test_leiden.Rmd")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Rcpp.package.skeleton(
"AluNet",
code_files = c(
"r/plotLeiden.R",
"r/graphFromFitHIC.R"
),
cpp_files = c(
"rcpp/Leiden.cpp",
"rcpp/Leiden.h",
"rcpp/Partition.cpp",
"rcpp/Partition.h",
"rcpp/Community.cpp",
"rcpp/Community.h",
"rcpp/GraphUtils.cpp",
"rcpp/GraphUtils.h"
),
example_code = FALSE
)
library(Rcpp)
Rcpp.package.skeleton(
"AluNet",
code_files = c(
"r/plotLeiden.R",
"r/graphFromFitHIC.R"
),
cpp_files = c(
"rcpp/Leiden.cpp",
"rcpp/Leiden.h",
"rcpp/Partition.cpp",
"rcpp/Partition.h",
"rcpp/Community.cpp",
"rcpp/Community.h",
"rcpp/GraphUtils.cpp",
"rcpp/GraphUtils.h"
),
example_code = FALSE
)
Rcpp.package.skeleton(
"AluNet",
code_files = c(
"r/plotLeiden.R",
"r/graphFromFitHIC.R"
),
cpp_files = c(
"rcpp/Leiden.cpp",
"rcpp/Leiden.h",
"rcpp/Partition.cpp",
"rcpp/Partition.h",
"rcpp/Community.cpp",
"rcpp/Community.h",
"rcpp/GraphUtils.cpp",
"rcpp/GraphUtils.h"
),
example_code = FALSE
)
setwd("C:/Users/bbessell/Projects/GitHub/AluNet/AluNet")
compileAttributes(verbose=TRUE)
devtools::load_all()
devtools::document()
devtools::check()
devtools::build()
install.packages("AluNet_1.0.tar.gz",repo=NULL)
remove.package("aluNet")
remove.package("AluNet")
remove.packages("AluNet")
install.packages("AluNet_1.0.tar.gz",repo=NULL)
unload(AluNet)
View(_AluNet_createGraphFromList)
detach("AluNet")
detach(AluNet)
detach(AluNet, unload=TRUE)
detach("AluNet", unload=TRUE)
