objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
print(ldc)
plot(ldc, g)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
#sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=c(communities)
)
#plot.graph(result, "karate_leiden.png")
View(g)
View(g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
plot(ldc, g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
plot(my_ldc, g)
g <- make_graph("Zachary")
# By default CPM is used
r <- quantile(strength(g))[2] / (gorder(g) - 1)
# Set seed for sake of reproducibility
set.seed(1)
ldc <- cluster_leiden(
g,
resolution_parameter=gamma,
objective_function="CPM",
weights=g_list[["weight"]],
beta=theta,
n_iterations=iterations,
vertex_weights = rep(1, length(unique(c(g_list[["to"]], g_list[["from"]]))))
)
print(ldc)
plot(ldc, g)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
g <- make_graph('Zachary')
plot(my_ldc, g)
View(ldc)
View(ldc)
View(ldc)
View(ldc)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
g <- make_graph('Zachary')
#plot(my_ldc, g)
plot.graph(result, "karate_leiden.png")
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
#sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
#plot.graph(g_list, "karate_nodes.png")
iterations <- 1
gamma <- 0.5  # gamma > 0
theta <- 0.01 # good theta is 0.005 < 0.05
result <- runLeiden(g_list, iterations, gamma, theta)
my_ldc <- list(
membership=result$communities,
nb_clusters=length(unique(result$communities)),
quality=result$quality,
algorithm="homemade_leiden",
vcount=length(result$communities)
)
g <- make_graph('Zachary')
#plot(my_ldc, g)
plot.graph(result, "karate_leiden.png")
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
plot.graph(g_list, "karate_nodes.png")
library(Rcpp)
library(igraph)
library(Matrix)
source("r/graphFromFitHIC.R")
update.packages("Rcpp")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
Sys.setenv(PKG_CXXFLAGS = "-std=c++17")
Sys.which("make")
Sys.which("g++")
#sourceCpp("rcpp/compile_test.cpp", verbose = TRUE, rebuild = TRUE)
#sourceCpp("rcpp/GraphUtils.cpp", verbose = F, rebuild = TRUE)
#sourceCpp("rcpp/Leiden.cpp", verbose = F, rebuild = TRUE)
source("r/plot_graph.R")
View(plot.graph)
g <- as_edgelist(make_graph('Zachary'))
g_list <- list(
to=g[,1],
from=g[,2],
weight=rep(1, length(g[,1]))
)
plot.graph(g_list, "karate_nodes.png", small_nodes=F)
source("C:/Users/bbessell/Projects/GitHub/AluNet/test_leiden.Rmd")
knitr::opts_chunk$set(echo = TRUE)
setwd("C:/Users/bbessell/OneDrive - Michigan Medicine/Documents/Courses/BIOSTAT615/test_package")
#setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("babessell1/AluNet/AluNet")
# the above doesn't work
#url <- "https://github.com/babessell1/AluNet/raw/main/AluNet_1.0.tar.gz"
#download.file(url, "AluNet_1.0.tar.gz")
#install.packages("AluNet_1.0.tar.gz",repo=NULL)
if (!require("igraph")) {
install.packages("igraph")
}
if (!require("microbenchmark")) {
install.packages("microbenchmark")
}
install.packages("igraph")
install.packages("igraph")
devtools::install_github("babessell1/AluNet/AluNet")
knitr::opts_chunk$set(echo = TRUE)
if (!require("igraph")) {
install.packages("igraph")
}
if (!require("microbenchmark")) {
install.packages("microbenchmark")
}
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("babessell1/AluNet/AluNet")
# the above doesn't work
#url <- "https://github.com/babessell1/AluNet/raw/main/AluNet_1.0.tar.gz"
#download.file(url, "AluNet_1.0.tar.gz")
#install.packages("AluNet_1.0.tar.gz",repo=NULL)
library(igraph)
library(microbenchmark)
library(AluNet)
remove.packages(aluNet)
remove.packages(AluNet)
remove.packages('AluNet')
knitr::opts_chunk$set(echo = TRUE)
table1 <- data.frame(
"Implementation" = c("Ours", "igraph"),
"16-Node Graph\nAverage Time [microseconds]" = c("Data1", "Data2"),
"32-Node Graph\nAverage Time [microseconds]"= c("Data1", "Data2")
)
kable(table1, caption = "Table 1: Benchmarking Results comparing our implementation speed to igraph")
knitr::opts_chunk$set(echo = TRUE)
table1 <- data.frame(
"Implementation" = c("Ours", "igraph"),
"16-Node Graph\nAverage Time [microseconds]" = c("Data1", "Data2"),
"32-Node Graph\nAverage Time [microseconds]"= c("Data1", "Data2")
)
knitr::kable(table1, caption = "Table 1: Benchmarking Results comparing our implementation speed to igraph")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
install.packages("kableExtra")
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
table1 <- data.frame(
"Implementation" = c("Ours", "igraph"),
"16-Node Graph\nAverage Time [microseconds]" = c("Data1", "Data2"),
"32-Node Graph\nAverage Time [microseconds]"= c("Data1", "Data2")
)
knitr::kable(table1, caption="Table 1: Benchmarking Results comparing our implementation speed to igraph", format="html") %>% kable_styling()
table1 <- data.frame(
c("Ours", "igraph"),
c("Data1", "Data2"),
c("Data1", "Data2")
)
colnames(table1) <- c("Implementation",
"16-Node Graph\nAverage Time [microseconds]",
"32-Node Graph\nAverage Time [microseconds]")
knitr::kable(table1, caption="Table 1: Benchmarking Results comparing our implementation speed to igraph", format="html") %>% kable_styling()
table1 <- data.frame(
c("Ours", "igraph"),
c("Data1", "Data2"),
c("Data1", "Data2")
)
colnames(table1) <- c("Implementation",
"16-Node Graph\nAverage Time [microseconds]",
"32-Node Graph\nAverage Time [microseconds]")
knitr::kable(
table1,
caption="Table 1: Benchmarking Results comparing our implementation speed to igraph", format="html", align=c('c', 'c', 'c')
) %>% kable_styling(
full_width = F,      # This line is for applying default Bootstrap theme
bootstrap_options = c("striped", "hover", "condensed", "responsive")
) %>% row_spec(
0,
bold = T,
color = "white",
background = "gray")
)
table1 <- data.frame(
c("Ours", "igraph"),
c("Data1", "Data2"),
c("Data1", "Data2")
)
colnames(table1) <- c("Implementation",
"16-Node Graph\nAverage Time [microseconds]",
"32-Node Graph\nAverage Time [microseconds]")
knitr::kable(
table1,
caption="Table 1: Benchmarking Results comparing our implementation speed to igraph", format="html", align=c('c', 'c', 'c')
) %>% kable_styling(
full_width = F,      # This line is for applying default Bootstrap theme
bootstrap_options = c("striped", "hover", "condensed", "responsive")
) %>% row_spec(
0,
bold = T,
color = "white",
background = "gray"
)
knitr::include_graphics("./alu_plot.png")
# change this!
setwd("C:/Users/bbessell/OneDrive - Michigan Medicine/Documents/Courses/BIOSTAT615/test_package")
#setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
if (!require("R.Utils")) {
install.packages("R.Utils")
}
if (!require("R.utils")) {
install.packages("R.utils")
}
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
# change this!
setwd("C:/Users/bbessell/OneDrive - Michigan Medicine/Documents/Courses/BIOSTAT615/test_package")
#setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
if (!require("igraph")) {
install.packages("igraph")
}
if (!require("microbenchmark")) {
install.packages("microbenchmark")
}
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("babessell1/AluNet/AluNet")
# the above doesn't work
#url <- "https://github.com/babessell1/AluNet/raw/main/AluNet_1.0.tar.gz"
#download.file(url, "AluNet_1.0.tar.gz")
#install.packages("AluNet_1.0.tar.gz",repo=NULL)
url <- "https://github.com/babessell1/AluNet/raw/main/edges_data_frame.csv"
download.file(url, "edges_data_frame.csv")
dataframe <- read.csv("edges_data_frame.csv")
list <- as.list(dataframe)
library(igraph)
library(microbenchmark)
library(AluNet)
png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, Alus=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(kableExtra)
# change this!
setwd("C:/Users/bbessell/OneDrive - Michigan Medicine/Documents/Courses/BIOSTAT615/test_package")
#setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
if (!require("igraph")) {
install.packages("igraph")
}
if (!require("microbenchmark")) {
install.packages("microbenchmark")
}
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("babessell1/AluNet/AluNet")
# the above doesn't work
#url <- "https://github.com/babessell1/AluNet/raw/main/AluNet_1.0.tar.gz"
#download.file(url, "AluNet_1.0.tar.gz")
#install.packages("AluNet_1.0.tar.gz",repo=NULL)
library(igraph)
library(microbenchmark)
library(AluNet)
url <- "https://github.com/babessell1/AluNet/raw/main/edges_data_frame.csv"
download.file(url, "edges_data_frame.csv")
dataframe <- read.csv("edges_data_frame.csv")
list <- as.list(dataframe)
result <- runLeiden(list, 1, 1, 0.01, 1)
png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, Alus=TRUE)
remove.packages("AluNet")
if (!require("igraph")) {
install.packages("igraph")
}
if (!require("microbenchmark")) {
install.packages("microbenchmark")
}
if (!require("devtools")) {
install.packages("devtools")
}
devtools::install_github("babessell1/AluNet/AluNet")
# the above doesn't work
#url <- "https://github.com/babessell1/AluNet/raw/main/AluNet_1.0.tar.gz"
#download.file(url, "AluNet_1.0.tar.gz")
#install.packages("AluNet_1.0.tar.gz",repo=NULL)
library(igraph)
library(microbenchmark)
library(AluNet)
png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, Alus=TRUE)
devtools::load_all()
setwd("C:/Users/bbessell/Projects/GitHub/AluNet")
setwd("AluNet")
devtools::load_all()
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::build()
