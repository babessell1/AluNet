#' @return A plot of the graph with nodes colored based on community.
#' @export
plotLeiden <- function(result, Alus=FALSE, alu_vec=NULL) {
gdf <- graph.data.frame(result$graph)
# Get node indices from the graph
node_indices = V(gdf)$name
# Create map of node names to their communities
node_community_map <- setNames(result$communities, result$node_names)
# Assign membership in graph dataframe based on result of Leiden
V(gdf)$membership <- node_community_map[node_indices]
# Create colormap for the communities
num_communities <- length(unique(result$communities))
community_colors <- rainbow(num_communities)
colors <- community_colors[as.factor(V(gdf)$membership)]
# Define the edge colors based on ALU group
# alu_colors <- c("AluJ" = "purple", "AluS" = "black", "AluY" = "red")
# edge_alpha <- 0.8
# Matching edges from the graph to the list and assigning colors
# matched_indices <- match(paste(E(gdf)$from, E(gdf)$to), paste(list$from, list$to))
# print(matched_indices)
# default_color <- "grey"  # Default color for unmatched edges
# edge_colors <- rep(default_color, ecount(gdf))
# valid_indices <- !is.na(matched_indices)
# edge_colors[valid_indices] <- adjustcolor(alu_colors[list$group[matched_indices[valid_indices]]], alpha.f = edge_alpha)
# E(gdf)$color <- edge_colors
# Plot logic
plot_ <- function() {
if (!Alus) {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,
vertex.frame.color = colors,
edge.color = E(gdf)$color,  # Edge colors
vertex.label = alu_vec,
edge.arrow.size = 0,
main = "Our Rcpp-based Clustering"
)
} else {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,
vertex.size = 4,
vertex.frame.color = colors,
edge.color = alu_vec,  # Edge colors
vertex.label = alu_vec,
edge.arrow.size = 0,
main = "Candidate Chromatin Modulating Alu Communities (Chr22)", "Our Rcpp-based Clustering"
)
}
legend("topright", legend = unique(V(gdf)$membership),
col = community_colors, pch = 19,
title = "Communities", cex = 0.8)
}
# Execute the plot
plot_()
}
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, Alus=TRUE, alu_vec=predominant_alu$predominant_alu)
#' Plot the output of the Leiden algorithm, coloring nodes based on community
#'
#' @param result The result of the runLeiden function.
#' @return A plot of the graph with nodes colored based on community.
#' @export
plotLeiden <- function(result, Alus=FALSE, alu_vec=NULL) {
gdf <- graph.data.frame(result$graph)
# Get node indices from the graph
node_indices = V(gdf)$name
# Create map of node names to their communities
node_community_map <- setNames(result$communities, result$node_names)
# Assign membership in graph dataframe based on result of Leiden
V(gdf)$membership <- node_community_map[node_indices]
# Create colormap for the communities
num_communities <- length(unique(result$communities))
community_colors <- rainbow(num_communities)
colors <- community_colors[as.factor(V(gdf)$membership)]
# Define the edge colors based on ALU group
# alu_colors <- c("AluJ" = "purple", "AluS" = "black", "AluY" = "red")
# edge_alpha <- 0.8
# Matching edges from the graph to the list and assigning colors
# matched_indices <- match(paste(E(gdf)$from, E(gdf)$to), paste(list$from, list$to))
# print(matched_indices)
# default_color <- "grey"  # Default color for unmatched edges
# edge_colors <- rep(default_color, ecount(gdf))
# valid_indices <- !is.na(matched_indices)
# edge_colors[valid_indices] <- adjustcolor(alu_colors[list$group[matched_indices[valid_indices]]], alpha.f = edge_alpha)
# E(gdf)$color <- edge_colors
# Plot logic
plot_ <- function() {
if (!Alus) {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,
vertex.frame.color = colors,
edge.color = E(gdf)$color,  # Edge colors
vertex.label = alu_vec,
edge.arrow.size = 0,
main = "Our Rcpp-based Clustering"
)
} else {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,
vertex.size = 4,
vertex.frame.color = colors,
edge.color = as.factor(alu_vec),  # Edge colors
vertex.label = alu_vec,
edge.arrow.size = 0,
main = "Candidate Chromatin Modulating Alu Communities (Chr22)", "Our Rcpp-based Clustering"
)
}
legend("topright", legend = unique(V(gdf)$membership),
col = community_colors, pch = 19,
title = "Communities", cex = 0.8)
}
# Execute the plot
plot_()
}
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, Alus=TRUE, alu_vec=predominant_alu$predominant_alu)
#' Plot the output of the Leiden algorithm, coloring nodes based on community
#'
#' @param result The result of the runLeiden function.
#' @return A plot of the graph with nodes colored based on community.
#' @export
plotLeiden <- function(result, Alus=FALSE, alu_vec=NULL) {
gdf <- graph.data.frame(result$graph)
# Get node indices from the graph
node_indices = V(gdf)$name
# Create map of node names to their communities
node_community_map <- setNames(result$communities, result$node_names)
# Assign membership in graph dataframe based on result of Leiden
V(gdf)$membership <- node_community_map[node_indices]
# Create colormap for the communities
num_communities <- length(unique(result$communities))
community_colors <- rainbow(num_communities)
colors <- community_colors[as.factor(V(gdf)$membership)]
# Define the edge colors based on ALU group
# alu_colors <- c("AluJ" = "purple", "AluS" = "black", "AluY" = "red")
# edge_alpha <- 0.8
# Matching edges from the graph to the list and assigning colors
# matched_indices <- match(paste(E(gdf)$from, E(gdf)$to), paste(list$from, list$to))
# print(matched_indices)
# default_color <- "grey"  # Default color for unmatched edges
# edge_colors <- rep(default_color, ecount(gdf))
# valid_indices <- !is.na(matched_indices)
# edge_colors[valid_indices] <- adjustcolor(alu_colors[list$group[matched_indices[valid_indices]]], alpha.f = edge_alpha)
# E(gdf)$color <- edge_colors
# Plot logic
plot_ <- function() {
if (!Alus) {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,
vertex.frame.color = colors,
edge.color = E(gdf)$color,  # Edge colors
vertex.label = alu_vec,
edge.arrow.size = 0,
main = "Our Rcpp-based Clustering"
)
} else {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,
vertex.size = 4,
vertex.frame.color = colors,
#edge.color = as.factor(alu_vec),  # Edge colors
vertex.label = alu_vec,
edge.arrow.size = 0,
main = "Candidate Chromatin Modulating Alu Communities (Chr22)", "Our Rcpp-based Clustering"
)
}
legend("topright", legend = unique(V(gdf)$membership),
col = community_colors, pch = 19,
title = "Communities", cex = 0.8)
}
# Execute the plot
plot_()
}
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, Alus=TRUE, alu_vec=predominant_alu$predominant_alu)
#dev.off()
```
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, Alus=TRUE, alu_vec=predominant_alu$predominant_alu)
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result)
#dev.off()
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, FALSE)
#dev.off()
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, TRUE)
#' Plot the output of the Leiden algorithm, coloring nodes based on community
#'
#' @param result The result of the runLeiden function.
#' @return A plot of the graph with nodes colored based on community.
#' @export
plotLeiden <- function(result, Alus=FALSE, alu_vec=NULL) {
gdf <- graph.data.frame(result$graph)
# Get node indices from the graph
node_indices = V(gdf)$name
# Create map of node names to their communities
node_community_map <- setNames(result$communities, result$node_names)
# Assign membership in graph dataframe based on result of Leiden
V(gdf)$membership <- node_community_map[node_indices]
# Create colormap for the communities
num_communities <- length(unique(result$communities))
community_colors <- rainbow(num_communities)
colors <- community_colors[as.factor(V(gdf)$membership)]
# Define the edge colors based on ALU group
# alu_colors <- c("AluJ" = "purple", "AluS" = "black", "AluY" = "red")
# edge_alpha <- 0.8
# Matching edges from the graph to the list and assigning colors
# matched_indices <- match(paste(E(gdf)$from, E(gdf)$to), paste(list$from, list$to))
# print(matched_indices)
# default_color <- "grey"  # Default color for unmatched edges
# edge_colors <- rep(default_color, ecount(gdf))
# valid_indices <- !is.na(matched_indices)
# edge_colors[valid_indices] <- adjustcolor(alu_colors[list$group[matched_indices[valid_indices]]], alpha.f = edge_alpha)
# E(gdf)$color <- edge_colors
# Plot logic
plot_ <- function() {
if (!Alus) {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,
vertex.frame.color = colors,
edge.color = E(gdf)$color,  # Edge colors
edge.arrow.size = 0,
main = "Our Rcpp-based Clustering"
)
} else {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,
vertex.size = 4,
vertex.frame.color = colors,
#edge.color = as.factor(alu_vec),  # Edge colors
vertex.label = alu_vec,
edge.arrow.size = 0,
main = "Candidate Chromatin Modulating Alu Communities (Chr22)", "Our Rcpp-based Clustering"
)
}
legend("topright", legend = unique(V(gdf)$membership),
col = community_colors, pch = 19,
title = "Communities", cex = 0.8)
}
# Execute the plot
plot_()
}
#' Plot the output of the Leiden algorithm, coloring nodes based on community
#'
#' @param result The result of the runLeiden function.
#' @return A plot of the graph with nodes colored based on community.
#' @export
plotLeiden <- function(result, Alus=FALSE, alu_vec=NULL) {
gdf <- graph.data.frame(result$graph)
# Get node indices from the graph
node_indices = V(gdf)$name
# Create map of node names to their communities
node_community_map <- setNames(result$communities, result$node_names)
# Assign membership in graph dataframe based on result of Leiden
V(gdf)$membership <- node_community_map[node_indices]
# Create colormap for the communities
num_communities <- length(unique(result$communities))
community_colors <- rainbow(num_communities)
colors <- community_colors[as.factor(V(gdf)$membership)]
# Define the edge colors based on ALU group
# alu_colors <- c("AluJ" = "purple", "AluS" = "black", "AluY" = "red")
# edge_alpha <- 0.8
# Matching edges from the graph to the list and assigning colors
# matched_indices <- match(paste(E(gdf)$from, E(gdf)$to), paste(list$from, list$to))
# print(matched_indices)
# default_color <- "grey"  # Default color for unmatched edges
# edge_colors <- rep(default_color, ecount(gdf))
# valid_indices <- !is.na(matched_indices)
# edge_colors[valid_indices] <- adjustcolor(alu_colors[list$group[matched_indices[valid_indices]]], alpha.f = edge_alpha)
# E(gdf)$color <- edge_colors
# Plot logic
plot_ <- function() {
if (!Alus) {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,
vertex.frame.color = colors,
edge.color = E(gdf)$color,  # Edge colors
edge.arrow.size = 0,
main = "Our Rcpp-based Clustering"
)
} else {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,
vertex.size = 4,
vertex.frame.color = colors,
#edge.color = as.factor(alu_vec),  # Edge colors
#vertex.label = alu_vec,
edge.arrow.size = 0,
main = "Candidate Chromatin Modulating Alu Communities (Chr22)", "Our Rcpp-based Clustering"
)
}
legend("topright", legend = unique(V(gdf)$membership),
col = community_colors, pch = 19,
title = "Communities", cex = 0.8)
}
# Execute the plot
plot_()
}
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, TRUE)
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, TRUE)
plotLeiden <- function(result, Alus = FALSE) {
# Improved color scheme with high contrast and colorblind friendly
alu_colors <- c("AluJ_count" = "purple", "AluS_count" = "black", "AluY_count" = "red")
gdf <- graph.data.frame(result$graph)
# get node indices from the graph
node_indices = V(gdf)$name
# create map of node names to their communitys
node_community_map <- setNames(result$communities, result$node_names)
# assign membership in graph dataframe based on result of Leiden
V(gdf)$membership <- node_community_map[node_indices]
# create colormap for the communities
get_community_colors <- function(num_communities) {
rainbow(num_communities)
}
# map communities to the colormap
num_communities <- length(unique(result$communities))
community_colors <- get_community_colors(num_communities)
colors <- community_colors[as.factor(V(gdf)$membership)]
# Plot the graph
if (!Alus) {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,  # Color nodes based on community
vertex.frame.color = colors,
#edge.color = color_palette[cut(E(gdf)$weight, breaks = 100)],  # Map edge color from cold to hot
vertex.label = V(gdf)$name,
edge.arrow.size = 0,  # Set arrow size to 0 to remove arrows
main = "Our Rcpp-based Clustering"
)
# Add a legend for community colors
legend("topright", legend = unique(V(gdf)$membership),
col = community_colors, pch = 19,
title = "Communities", cex = 0.8)
} else {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,  # Color nodes based on community
vertex.frame.color = colors,
# make vertices smaller
vertex.size = 1,
#edge.color = color_palette[cut(E(gdf)$weight, breaks = 100)],  # Map edge color from cold to hot
vertex.label = NA,
edge.arrow.size = 0,  # Set arrow size to 0 to remove arrows
main = "Candidate Chromatin Modulating Alu Communities (Chr22)"
)
}
}
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, TRUE)
#dev.off()
#' Plot the output of the Leiden algorithm, coloring nodes based on community
#'
#' @param result The result of the runLeiden function.
#' @param Alus Whether or not to the input is from the Alu data.
#' @return A plot of the graph with nodes colored based on community.
#' @export
plotLeiden <- function(result, Alus = FALSE) {
# Improved color scheme with high contrast and colorblind friendly
alu_colors <- c("AluJ_count" = "purple", "AluS_count" = "black", "AluY_count" = "red")
gdf <- graph.data.frame(result$graph)
# get node indices from the graph
node_indices = V(gdf)$name
# create map of node names to their communitys
node_community_map <- setNames(result$communities, result$node_names)
# assign membership in graph dataframe based on result of Leiden
V(gdf)$membership <- node_community_map[node_indices]
# create colormap for the communities
get_community_colors <- function(num_communities) {
rainbow(num_communities)
}
# map communities to the colormap
num_communities <- length(unique(result$communities))
community_colors <- get_community_colors(num_communities)
colors <- community_colors[as.factor(V(gdf)$membership)]
# Plot the graph
if (!Alus) {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,  # Color nodes based on community
vertex.frame.color = colors,
#edge.color = color_palette[cut(E(gdf)$weight, breaks = 100)],  # Map edge color from cold to hot
vertex.label = V(gdf)$name,
edge.arrow.size = 0,  # Set arrow size to 0 to remove arrows
main = "Our Rcpp-based Clustering"
)
# Add a legend for community colors
legend("topright", legend = unique(V(gdf)$membership),
col = community_colors, pch = 19,
title = "Communities", cex = 0.8)
} else {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,  # Color nodes based on community
vertex.frame.color = colors,
# make vertices smaller
vertex.size = 4,
#edge.color = color_palette[cut(E(gdf)$weight, breaks = 100)],  # Map edge color from cold to hot
vertex.label = NA,
edge.arrow.size = 0,  # Set arrow size to 0 to remove arrows
main = "Candidate Chromatin Modulating Alu Communities (Chr22)"
)
}
}
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, TRUE)
#dev.off()
result <- runLeiden(list_, 2, 1, 0.01, 1)
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, TRUE)
#dev.off()
result <- runLeiden(list_, 10, 1, 0.01, 1)
#png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, TRUE)
#dev.off()
png("alu_plot.png", width = 1000, height = 1000, res = 300)
plotLeiden(result, TRUE)
dev.off()
library(igraph)
library(microbenchmark)
library(AluNet)
library(igraph)
library(microbenchmark)
library("AluNet")
setwd("C:/Users/bbessell/Projects/GitHub/AluNet/AluNet")
devtools::check()
#' Plot the output of the Leiden algorithm, coloring nodes based on community
#'
#' @param result The result of the runLeiden function.
#' @param Alus Whether or not to the input is from the Alu data.
#' @return A plot of the graph with nodes colored based on community.
#' @export
plotLeiden <- function(result, Alus = FALSE) {
# Improved color scheme with high contrast and colorblind friendly
alu_colors <- c("AluJ_count" = "purple", "AluS_count" = "black", "AluY_count" = "red")
gdf <- graph.data.frame(result$graph)
# get node indices from the graph
node_indices = V(gdf)$name
# create map of node names to their communitys
node_community_map <- setNames(result$communities, result$node_names)
# assign membership in graph dataframe based on result of Leiden
V(gdf)$membership <- node_community_map[node_indices]
# create colormap for the communities
get_community_colors <- function(num_communities) {
rainbow(num_communities)
}
# map communities to the colormap
num_communities <- length(unique(result$communities))
community_colors <- get_community_colors(num_communities)
colors <- community_colors[as.factor(V(gdf)$membership)]
# Plot the graph
if (!Alus) {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,  # Color nodes based on community
vertex.frame.color = colors,
#edge.color = color_palette[cut(E(gdf)$weight, breaks = 100)],  # Map edge color from cold to hot
vertex.label = V(gdf)$name,
edge.arrow.size = 0,  # Set arrow size to 0 to remove arrows
main = "Our Rcpp-based Clustering"
)
# Add a legend for community colors
legend("topright", legend = unique(V(gdf)$membership),
col = community_colors, pch = 19,
title = "Communities", cex = 0.8)
} else {
plot(
gdf,
layout = layout_with_fr(gdf),
vertex.color = colors,  # Color nodes based on community
vertex.frame.color = colors,
# make vertices smaller
vertex.size = 4,
#edge.color = color_palette[cut(E(gdf)$weight, breaks = 100)],  # Map edge color from cold to hot
vertex.label = NA,
edge.arrow.size = 0,  # Set arrow size to 0 to remove arrows
main = "Candidate Chromatin Modulating Alu Communities (Chr22)"
)
}
}
library(igraph)
library(microbenchmark)
library("AluNet")
library(igraph)
library(microbenchmark)
library("AluNet")
